'use strict';

// handles requests to every route

var db = require('../db/config.js');
var request = require('request');
var app = require('./server.js');
var _ = require('underscore');

var User = db.User;
var Movie = db.Movie;

var omdb = 'http://www.omdbapi.com/?';

module.exports = {
  login: function login(req, res, next) {
    var username = req.body.username;
    var password = req.body.password;
    User.findOne({ username: username, password: password }).then(function (user) {
      if (user) {
        req.session.username = req.body.username;
        req.session.password = req.body.password;
        console.log('Logging in..');
        res.redirect('/');
      } else {
        res.send('Invalid username/password. Please refresh');
      }
    });
  },

  logout: function logout(req, res, next) {
    req.session.username = null;
    req.session.password = null;
    console.log('Logging out..');
    res.redirect('/login');
  },

  signup: function signup(req, res, next) {
    console.log('Signing up..');
    var username = req.body.username;
    var password = req.body.password;
    User.find({ username: username }).then(function (users) {
      if (!users.length) {
        new User({ username: username, password: password }).save().then(function (user) {
          console.log('New user: ', user);
          req.session.username = req.body.username;
          req.session.password = req.body.password;
          res.redirect('/');
        });
      } else {
        console.log('That user already exists');
        res.redirect('/login');
      }
    });
  },

  checkSession: function checkSession(req, res, next) {
    var path = req.path;
    if (path === '/' && path !== '/login' && path !== '/signup') {
      if (!req.session.username || req.session.username === null) {
        res.redirect('/login');
      } else {
        next();
      }
    } else {
      next();
    }
  },

  fetchMovies: function fetchMovies(req, res, next) {
    var username = req.session.username;
    User.findOne({ username: username }).then(function (user) {
      res.send(user.movieList);
    });
  },

  addMovie: function addMovie(req, res, next) {
    var movie = req.body.movie.split(' ').join('+');
    var url = omdb + 'tomatoes=true&t=' + movie;
    var username = req.session.username;
    // var user = User.findOne({username: req.session.username})
    console.log(username);
    Movie.find({ title: req.body.movie }).then(function (movies) {
      // add movie to db if the query returned empty
      if (!movies.length) {
        request(url, function (err, response, body) {
          if (err) {
            console.log('error from omdb request: ', err);
          } else {
            var data = JSON.parse(response.body);
            console.log(data);
            var info = {
              title: data.Title,
              year: data.Year,
              img: data.Poster,
              length: data.Runtime,
              plot: data.Plot,
              rating: data.tomatoUserRating
            };
            new Movie(info).save().then(function (movie) {
              console.log('Saving movie to db');
              console.log('Movie: ', movie);
              User.update({ username: username }, { $push: { movieList: movie._id } }, { safe: true, upsert: true }, function (err, model) {
                if (err) {
                  console.log('err updating user movieList', err);
                }
              });
              res.send(movie);
            });
          }
        });
      } else {
        console.log('Movie: ', movies[0]);
        User.update({ username: username }, { $push: { movieList: movies[0]._id } }, { safe: true, upsert: true }, function (err, model) {
          if (err) {
            console.log('err updating user movieList', err);
          }
        });
        res.send(movies[0]);
      }
    }).catch(function (err) {
      console.log('error in finding movies: ', err);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,