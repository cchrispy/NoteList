'use strict';

// handles requests to every route

var db = require('../db/config.js');
var request = require('request');
var app = require('./server.js');
var _ = require('underscore');

var User = db.User;
var Movie = db.Movie;

var omdb = 'http://www.omdbapi.com/?';

module.exports = {
  login: function login(req, res, next) {
    var username = req.body.username;
    var password = req.body.password;
    User.findOne({ username: username, password: password }).then(function (user) {
      if (user) {
        req.session.username = req.body.username;
        req.session.password = req.body.password;
        console.log('Loggin in..');
        res.redirect('/');
      } else {
        res.send('Invalid username/password. Please refresh');
      }
    });
  },

  logout: function logout(req, res, next) {
    req.session.username = null;
    req.session.password = null;
    console.log('Logging out..');
    res.redirect('/login');
  },

  signup: function signup(req, res, next) {
    console.log('Signing up..');
    var username = req.body.username;
    var password = req.body.password;
    User.find({ username: username }).then(function (users) {
      if (!users.length) {
        new User({ username: username, password: password }).save().then(function (user) {
          console.log('New user: ', user);
          req.session.username = req.body.username;
          req.session.password = req.body.password;
          res.redirect('/');
        });
      } else {
        console.log('That user already exists');
        res.redirect('/login');
      }
    });
  },

  checkSession: function checkSession(req, res, next) {
    var path = req.path;
    if (path === '/' && path !== '/login' && path !== '/signup') {
      if (!req.session.username || req.session.username === null) {
        res.redirect('/login');
      } else {
        next();
      }
    } else {
      next();
    }
  },

  addMovie: function addMovie(req, res, next) {
    var movie = req.body.movie.split(' ').join('+');
    var url = omdb + 'tomatoes=true&t=' + movie;
    Movie.find({ title: req.body.movie }).then(function (movies) {
      // add movie to db if the query returned empty
      if (!movies.length) {
        request(url, function (err, response, body) {
          if (err) {
            console.log('error from omdb request: ', err);
          } else {
            var data = JSON.parse(response.body);
            console.log(data);
            var info = {
              title: data.Title,
              year: data.Year,
              img: data.Poster,
              length: data.Runtime,
              plot: data.Plot,
              rating: data.tomatoUserRating
            };
            new Movie(info).save().then(function (movie) {
              console.log('Saving movie to db');
              res.send(movie);
            });
          }
        });
      } else {
        res.send(movies[0]);
      }
    }).catch(function (err) {
      console.log('error in finding movies: ', err);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,