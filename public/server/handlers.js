'use strict';

var db = require('../db/config.js');
var request = require('request');
var app = require('./server.js');
var _ = require('underscore');

var User = db.User;
var Movie = db.Movie;

var omdb = 'http://www.omdbapi.com/?';

module.exports = {
  login: function login(req, res, next) {
    req.session.username = req.body.username;
    req.session.password = req.body.password;
    console.log(req.session);
    res.redirect('/');
  },
  logout: function logout(req, res, next) {
    req.session.username = null;
    req.session.password = null;
    console.log(req.session);
    res.redirect('/login');
  },
  checkSession: function checkSession(req, res, next) {
    console.log(req.session);
    if (req.session.username !== '') {
      next();
    } else {
      var redirect = _.throttle(res.redirect, 600, { trailing: false });
      redirect('/login');
    }
  },
  addMovie: function addMovie(req, res, next) {
    var movie = req.body.movie.split(' ').join('+');
    var url = omdb + 'tomatoes=true&t=' + movie;
    Movie.find({ title: req.body.movie }).then(function (movies) {
      // add movie to db if the query returned empty
      if (!movies.length) {
        request(url, function (err, response, body) {
          if (err) {
            console.log('error from omdb request: ', err);
          } else {
            var data = JSON.parse(response.body);
            console.log(data);
            var info = {
              title: data.Title,
              year: data.Year,
              img: data.Poster,
              length: data.Runtime,
              plot: data.Plot,
              rating: data.tomatoUserRating
            };
            new Movie(info).save().then(function (movie) {
              console.log('saving movie to db');
              res.send(movie);
            });
          }
        });
      } else {
        res.send(movies[0]);
      }
    }).catch(function (err) {
      console.log('error in finding movies: ', err);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2ZXIvaGFuZGxlcnMuanMiXSwibmFtZXMiOlsiZGIiLCJyZXF1aXJlIiwicmVxdWVzdCIsImFwcCIsIl8iLCJVc2VyIiwiTW92aWUiLCJvbWRiIiwibW9kdWxlIiwiZXhwb3J0cyIsImxvZ2luIiwicmVxIiwicmVzIiwibmV4dCIsInNlc3Npb24iLCJ1c2VybmFtZSIsImJvZHkiLCJwYXNzd29yZCIsImNvbnNvbGUiLCJsb2ciLCJyZWRpcmVjdCIsImxvZ291dCIsImNoZWNrU2Vzc2lvbiIsInRocm90dGxlIiwidHJhaWxpbmciLCJhZGRNb3ZpZSIsIm1vdmllIiwic3BsaXQiLCJqb2luIiwidXJsIiwiZmluZCIsInRpdGxlIiwidGhlbiIsIm1vdmllcyIsImxlbmd0aCIsImVyciIsInJlc3BvbnNlIiwiZGF0YSIsIkpTT04iLCJwYXJzZSIsImluZm8iLCJUaXRsZSIsInllYXIiLCJZZWFyIiwiaW1nIiwiUG9zdGVyIiwiUnVudGltZSIsInBsb3QiLCJQbG90IiwicmF0aW5nIiwidG9tYXRvVXNlclJhdGluZyIsInNhdmUiLCJzZW5kIiwiY2F0Y2giXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsS0FBS0MsUUFBUSxpQkFBUixDQUFUO0FBQ0EsSUFBSUMsVUFBVUQsUUFBUSxTQUFSLENBQWQ7QUFDQSxJQUFJRSxNQUFNRixRQUFRLGFBQVIsQ0FBVjtBQUNBLElBQUlHLElBQUlILFFBQVEsWUFBUixDQUFSOztBQUVBLElBQUlJLE9BQU9MLEdBQUdLLElBQWQ7QUFDQSxJQUFJQyxRQUFRTixHQUFHTSxLQUFmOztBQUVBLElBQUlDLE9BQU8sMEJBQVg7O0FBRUFDLE9BQU9DLE9BQVAsR0FBaUI7QUFDZkMsU0FBTyxlQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBV0MsSUFBWCxFQUFvQjtBQUN6QkYsUUFBSUcsT0FBSixDQUFZQyxRQUFaLEdBQXVCSixJQUFJSyxJQUFKLENBQVNELFFBQWhDO0FBQ0FKLFFBQUlHLE9BQUosQ0FBWUcsUUFBWixHQUF1Qk4sSUFBSUssSUFBSixDQUFTQyxRQUFoQztBQUNBQyxZQUFRQyxHQUFSLENBQVlSLElBQUlHLE9BQWhCO0FBQ0FGLFFBQUlRLFFBQUosQ0FBYSxHQUFiO0FBQ0QsR0FOYztBQU9mQyxVQUFRLGdCQUFDVixHQUFELEVBQU1DLEdBQU4sRUFBV0MsSUFBWCxFQUFvQjtBQUMxQkYsUUFBSUcsT0FBSixDQUFZQyxRQUFaLEdBQXVCLElBQXZCO0FBQ0FKLFFBQUlHLE9BQUosQ0FBWUcsUUFBWixHQUF1QixJQUF2QjtBQUNBQyxZQUFRQyxHQUFSLENBQVlSLElBQUlHLE9BQWhCO0FBQ0FGLFFBQUlRLFFBQUosQ0FBYSxRQUFiO0FBQ0QsR0FaYztBQWFmRSxnQkFBYyxzQkFBQ1gsR0FBRCxFQUFNQyxHQUFOLEVBQVdDLElBQVgsRUFBb0I7QUFDaENLLFlBQVFDLEdBQVIsQ0FBWVIsSUFBSUcsT0FBaEI7QUFDQSxRQUFJSCxJQUFJRyxPQUFKLENBQVlDLFFBQVosS0FBeUIsRUFBN0IsRUFBaUM7QUFDL0JGO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsVUFBSU8sV0FBV2hCLEVBQUVtQixRQUFGLENBQVdYLElBQUlRLFFBQWYsRUFBeUIsR0FBekIsRUFBOEIsRUFBQ0ksVUFBVSxLQUFYLEVBQTlCLENBQWY7QUFDQUosZUFBUyxRQUFUO0FBQ0Q7QUFDRixHQXJCYztBQXNCZkssWUFBVSxrQkFBQ2QsR0FBRCxFQUFNQyxHQUFOLEVBQVdDLElBQVgsRUFBb0I7QUFDNUIsUUFBSWEsUUFBUWYsSUFBSUssSUFBSixDQUFTVSxLQUFULENBQWVDLEtBQWYsQ0FBcUIsR0FBckIsRUFBMEJDLElBQTFCLENBQStCLEdBQS9CLENBQVo7QUFDQSxRQUFJQyxNQUFNdEIsT0FBTyxrQkFBUCxHQUE0Qm1CLEtBQXRDO0FBQ0FwQixVQUFNd0IsSUFBTixDQUFXLEVBQUNDLE9BQU9wQixJQUFJSyxJQUFKLENBQVNVLEtBQWpCLEVBQVgsRUFBb0NNLElBQXBDLENBQXlDLFVBQUNDLE1BQUQsRUFBWTtBQUNuRDtBQUNBLFVBQUksQ0FBQ0EsT0FBT0MsTUFBWixFQUFvQjtBQUNsQmhDLGdCQUFRMkIsR0FBUixFQUFhLFVBQVNNLEdBQVQsRUFBY0MsUUFBZCxFQUF3QnBCLElBQXhCLEVBQThCO0FBQ3pDLGNBQUltQixHQUFKLEVBQVM7QUFDUGpCLG9CQUFRQyxHQUFSLENBQVksMkJBQVosRUFBeUNnQixHQUF6QztBQUNELFdBRkQsTUFFTztBQUNMLGdCQUFJRSxPQUFPQyxLQUFLQyxLQUFMLENBQVdILFNBQVNwQixJQUFwQixDQUFYO0FBQ0FFLG9CQUFRQyxHQUFSLENBQVlrQixJQUFaO0FBQ0EsZ0JBQUlHLE9BQU87QUFDVFQscUJBQU9NLEtBQUtJLEtBREg7QUFFVEMsb0JBQU1MLEtBQUtNLElBRkY7QUFHVEMsbUJBQUtQLEtBQUtRLE1BSEQ7QUFJVFgsc0JBQVFHLEtBQUtTLE9BSko7QUFLVEMsb0JBQU1WLEtBQUtXLElBTEY7QUFNVEMsc0JBQVFaLEtBQUthO0FBTkosYUFBWDtBQVFBLGdCQUFJNUMsS0FBSixDQUFVa0MsSUFBVixFQUFnQlcsSUFBaEIsR0FBdUJuQixJQUF2QixDQUE0QixVQUFTTixLQUFULEVBQWdCO0FBQzFDUixzQkFBUUMsR0FBUixDQUFZLG9CQUFaO0FBQ0FQLGtCQUFJd0MsSUFBSixDQUFTMUIsS0FBVDtBQUNELGFBSEQ7QUFJRDtBQUNGLFNBbkJEO0FBb0JELE9BckJELE1BcUJPO0FBQ0xkLFlBQUl3QyxJQUFKLENBQVNuQixPQUFPLENBQVAsQ0FBVDtBQUNEO0FBQ0YsS0ExQkQsRUEwQkdvQixLQTFCSCxDQTBCUyxVQUFDbEIsR0FBRCxFQUFTO0FBQ2hCakIsY0FBUUMsR0FBUixDQUFZLDJCQUFaLEVBQXlDZ0IsR0FBekM7QUFDRCxLQTVCRDtBQTZCRDtBQXREYyxDQUFqQiIsImZpbGUiOiJoYW5kbGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkYiA9IHJlcXVpcmUoJy4uL2RiL2NvbmZpZy5qcycpO1xudmFyIHJlcXVlc3QgPSByZXF1aXJlKCdyZXF1ZXN0Jyk7XG52YXIgYXBwID0gcmVxdWlyZSgnLi9zZXJ2ZXIuanMnKTtcbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xuXG52YXIgVXNlciA9IGRiLlVzZXI7XG52YXIgTW92aWUgPSBkYi5Nb3ZpZTtcblxudmFyIG9tZGIgPSAnaHR0cDovL3d3dy5vbWRiYXBpLmNvbS8/J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbG9naW46IChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgIHJlcS5zZXNzaW9uLnVzZXJuYW1lID0gcmVxLmJvZHkudXNlcm5hbWU7XG4gICAgcmVxLnNlc3Npb24ucGFzc3dvcmQgPSByZXEuYm9keS5wYXNzd29yZDtcbiAgICBjb25zb2xlLmxvZyhyZXEuc2Vzc2lvbik7XG4gICAgcmVzLnJlZGlyZWN0KCcvJyk7XG4gIH0sXG4gIGxvZ291dDogKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgcmVxLnNlc3Npb24udXNlcm5hbWUgPSBudWxsO1xuICAgIHJlcS5zZXNzaW9uLnBhc3N3b3JkID0gbnVsbDtcbiAgICBjb25zb2xlLmxvZyhyZXEuc2Vzc2lvbik7XG4gICAgcmVzLnJlZGlyZWN0KCcvbG9naW4nKTtcbiAgfSxcbiAgY2hlY2tTZXNzaW9uOiAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICBjb25zb2xlLmxvZyhyZXEuc2Vzc2lvbik7XG4gICAgaWYgKHJlcS5zZXNzaW9uLnVzZXJuYW1lICE9PSAnJykge1xuICAgICAgbmV4dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcmVkaXJlY3QgPSBfLnRocm90dGxlKHJlcy5yZWRpcmVjdCwgNjAwLCB7dHJhaWxpbmc6IGZhbHNlfSk7XG4gICAgICByZWRpcmVjdCgnL2xvZ2luJyk7XG4gICAgfVxuICB9LFxuICBhZGRNb3ZpZTogKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgdmFyIG1vdmllID0gcmVxLmJvZHkubW92aWUuc3BsaXQoJyAnKS5qb2luKCcrJyk7XG4gICAgdmFyIHVybCA9IG9tZGIgKyAndG9tYXRvZXM9dHJ1ZSZ0PScgKyBtb3ZpZTtcbiAgICBNb3ZpZS5maW5kKHt0aXRsZTogcmVxLmJvZHkubW92aWV9KS50aGVuKChtb3ZpZXMpID0+IHtcbiAgICAgIC8vIGFkZCBtb3ZpZSB0byBkYiBpZiB0aGUgcXVlcnkgcmV0dXJuZWQgZW1wdHlcbiAgICAgIGlmICghbW92aWVzLmxlbmd0aCkge1xuICAgICAgICByZXF1ZXN0KHVybCwgZnVuY3Rpb24oZXJyLCByZXNwb25zZSwgYm9keSkge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvciBmcm9tIG9tZGIgcmVxdWVzdDogJywgZXJyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICB2YXIgaW5mbyA9IHtcbiAgICAgICAgICAgICAgdGl0bGU6IGRhdGEuVGl0bGUsXG4gICAgICAgICAgICAgIHllYXI6IGRhdGEuWWVhcixcbiAgICAgICAgICAgICAgaW1nOiBkYXRhLlBvc3RlcixcbiAgICAgICAgICAgICAgbGVuZ3RoOiBkYXRhLlJ1bnRpbWUsXG4gICAgICAgICAgICAgIHBsb3Q6IGRhdGEuUGxvdCxcbiAgICAgICAgICAgICAgcmF0aW5nOiBkYXRhLnRvbWF0b1VzZXJSYXRpbmdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ldyBNb3ZpZShpbmZvKS5zYXZlKCkudGhlbihmdW5jdGlvbihtb3ZpZSkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc2F2aW5nIG1vdmllIHRvIGRiJyk7XG4gICAgICAgICAgICAgIHJlcy5zZW5kKG1vdmllKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzLnNlbmQobW92aWVzWzBdKTtcbiAgICAgIH1cbiAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnZXJyb3IgaW4gZmluZGluZyBtb3ZpZXM6ICcsIGVycik7XG4gICAgfSlcbiAgfVxufSJdfQ==