'use strict';

var db = require('../db/config.js');
var request = require('request');

var User = db.User;
var Movie = db.Movie;

var omdb = 'http://www.omdbapi.com/?';

module.exports = {
  addMovie: function addMovie(req, res, next) {
    var movie = req.body.movie.split(' ').join('+');
    var url = omdb + 'tomatoes=true&t=' + movie;
    Movie.find({ title: req.body.movie.toLowerCase() }).then(function (movies) {
      // add movie to db if the query returned empty
      if (!movies.length) {
        request(url, function (err, response, body) {
          if (err) {
            console.log('error from omdb request: ', err);
          } else {
            var data = JSON.parse(response.body);
            var info = {
              title: data.Title,
              year: data.Year,
              img: data.Poster,
              length: data.Runtime,
              plot: data.Plot,
              rating: data.tomatoUserRating
            };
            new Movie(info).save().then(function (movie) {
              console.log('saving movie to db');
              res.send(movie);
            });
          }
        });
      } else {
        res.send(movies[0]);
      }
    }).catch(function (err) {
      console.log('error in finding movies: ', err);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2ZXIvaGFuZGxlcnMuanMiXSwibmFtZXMiOlsiZGIiLCJyZXF1aXJlIiwicmVxdWVzdCIsIlVzZXIiLCJNb3ZpZSIsIm9tZGIiLCJtb2R1bGUiLCJleHBvcnRzIiwiYWRkTW92aWUiLCJyZXEiLCJyZXMiLCJuZXh0IiwibW92aWUiLCJib2R5Iiwic3BsaXQiLCJqb2luIiwidXJsIiwiZmluZCIsInRpdGxlIiwidG9Mb3dlckNhc2UiLCJ0aGVuIiwibW92aWVzIiwibGVuZ3RoIiwiZXJyIiwicmVzcG9uc2UiLCJjb25zb2xlIiwibG9nIiwiZGF0YSIsIkpTT04iLCJwYXJzZSIsImluZm8iLCJUaXRsZSIsInllYXIiLCJZZWFyIiwiaW1nIiwiUG9zdGVyIiwiUnVudGltZSIsInBsb3QiLCJQbG90IiwicmF0aW5nIiwidG9tYXRvVXNlclJhdGluZyIsInNhdmUiLCJzZW5kIiwiY2F0Y2giXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsS0FBS0MsUUFBUSxpQkFBUixDQUFUO0FBQ0EsSUFBSUMsVUFBVUQsUUFBUSxTQUFSLENBQWQ7O0FBRUEsSUFBSUUsT0FBT0gsR0FBR0csSUFBZDtBQUNBLElBQUlDLFFBQVFKLEdBQUdJLEtBQWY7O0FBRUEsSUFBSUMsT0FBTywwQkFBWDs7QUFFQUMsT0FBT0MsT0FBUCxHQUFpQjtBQUNmQyxZQUFVLGtCQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBV0MsSUFBWCxFQUFvQjtBQUM1QixRQUFJQyxRQUFRSCxJQUFJSSxJQUFKLENBQVNELEtBQVQsQ0FBZUUsS0FBZixDQUFxQixHQUFyQixFQUEwQkMsSUFBMUIsQ0FBK0IsR0FBL0IsQ0FBWjtBQUNBLFFBQUlDLE1BQU1YLE9BQU8sa0JBQVAsR0FBNEJPLEtBQXRDO0FBQ0FSLFVBQU1hLElBQU4sQ0FBVyxFQUFDQyxPQUFPVCxJQUFJSSxJQUFKLENBQVNELEtBQVQsQ0FBZU8sV0FBZixFQUFSLEVBQVgsRUFBa0RDLElBQWxELENBQXVELFVBQUNDLE1BQUQsRUFBWTtBQUNqRTtBQUNBLFVBQUksQ0FBQ0EsT0FBT0MsTUFBWixFQUFvQjtBQUNsQnBCLGdCQUFRYyxHQUFSLEVBQWEsVUFBU08sR0FBVCxFQUFjQyxRQUFkLEVBQXdCWCxJQUF4QixFQUE4QjtBQUN6QyxjQUFJVSxHQUFKLEVBQVM7QUFDUEUsb0JBQVFDLEdBQVIsQ0FBWSwyQkFBWixFQUF5Q0gsR0FBekM7QUFDRCxXQUZELE1BRU87QUFDTCxnQkFBSUksT0FBT0MsS0FBS0MsS0FBTCxDQUFXTCxTQUFTWCxJQUFwQixDQUFYO0FBQ0EsZ0JBQUlpQixPQUFPO0FBQ1RaLHFCQUFPUyxLQUFLSSxLQURIO0FBRVRDLG9CQUFNTCxLQUFLTSxJQUZGO0FBR1RDLG1CQUFLUCxLQUFLUSxNQUhEO0FBSVRiLHNCQUFRSyxLQUFLUyxPQUpKO0FBS1RDLG9CQUFNVixLQUFLVyxJQUxGO0FBTVRDLHNCQUFRWixLQUFLYTtBQU5KLGFBQVg7QUFRQSxnQkFBSXBDLEtBQUosQ0FBVTBCLElBQVYsRUFBZ0JXLElBQWhCLEdBQXVCckIsSUFBdkIsQ0FBNEIsVUFBU1IsS0FBVCxFQUFnQjtBQUMxQ2Esc0JBQVFDLEdBQVIsQ0FBWSxvQkFBWjtBQUNBaEIsa0JBQUlnQyxJQUFKLENBQVM5QixLQUFUO0FBQ0QsYUFIRDtBQUlEO0FBQ0YsU0FsQkQ7QUFtQkQsT0FwQkQsTUFvQk87QUFDTEYsWUFBSWdDLElBQUosQ0FBU3JCLE9BQU8sQ0FBUCxDQUFUO0FBQ0Q7QUFDRixLQXpCRCxFQXlCR3NCLEtBekJILENBeUJTLFVBQUNwQixHQUFELEVBQVM7QUFDaEJFLGNBQVFDLEdBQVIsQ0FBWSwyQkFBWixFQUF5Q0gsR0FBekM7QUFDRCxLQTNCRDtBQTRCRDtBQWhDYyxDQUFqQiIsImZpbGUiOiJoYW5kbGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkYiA9IHJlcXVpcmUoJy4uL2RiL2NvbmZpZy5qcycpO1xudmFyIHJlcXVlc3QgPSByZXF1aXJlKCdyZXF1ZXN0Jyk7XG5cbnZhciBVc2VyID0gZGIuVXNlcjtcbnZhciBNb3ZpZSA9IGRiLk1vdmllO1xuXG52YXIgb21kYiA9ICdodHRwOi8vd3d3Lm9tZGJhcGkuY29tLz8nXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhZGRNb3ZpZTogKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgdmFyIG1vdmllID0gcmVxLmJvZHkubW92aWUuc3BsaXQoJyAnKS5qb2luKCcrJyk7XG4gICAgdmFyIHVybCA9IG9tZGIgKyAndG9tYXRvZXM9dHJ1ZSZ0PScgKyBtb3ZpZTtcbiAgICBNb3ZpZS5maW5kKHt0aXRsZTogcmVxLmJvZHkubW92aWUudG9Mb3dlckNhc2UoKX0pLnRoZW4oKG1vdmllcykgPT4ge1xuICAgICAgLy8gYWRkIG1vdmllIHRvIGRiIGlmIHRoZSBxdWVyeSByZXR1cm5lZCBlbXB0eVxuICAgICAgaWYgKCFtb3ZpZXMubGVuZ3RoKSB7XG4gICAgICAgIHJlcXVlc3QodXJsLCBmdW5jdGlvbihlcnIsIHJlc3BvbnNlLCBib2R5KSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yIGZyb20gb21kYiByZXF1ZXN0OiAnLCBlcnIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UocmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICB2YXIgaW5mbyA9IHtcbiAgICAgICAgICAgICAgdGl0bGU6IGRhdGEuVGl0bGUsXG4gICAgICAgICAgICAgIHllYXI6IGRhdGEuWWVhcixcbiAgICAgICAgICAgICAgaW1nOiBkYXRhLlBvc3RlcixcbiAgICAgICAgICAgICAgbGVuZ3RoOiBkYXRhLlJ1bnRpbWUsXG4gICAgICAgICAgICAgIHBsb3Q6IGRhdGEuUGxvdCxcbiAgICAgICAgICAgICAgcmF0aW5nOiBkYXRhLnRvbWF0b1VzZXJSYXRpbmdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ldyBNb3ZpZShpbmZvKS5zYXZlKCkudGhlbihmdW5jdGlvbihtb3ZpZSkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc2F2aW5nIG1vdmllIHRvIGRiJyk7XG4gICAgICAgICAgICAgIHJlcy5zZW5kKG1vdmllKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9KSBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcy5zZW5kKG1vdmllc1swXSk7XG4gICAgICB9XG4gICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ2Vycm9yIGluIGZpbmRpbmcgbW92aWVzOiAnLCBlcnIpO1xuICAgIH0pXG4gIH1cbn0iXX0=