'use strict';

var db = require('../db/config.js');
var request = require('request');

var User = db.User;
var Movie = db.Movie;

var omdb = 'http://www.omdbapi.com/?';

module.exports = {
  addMovie: function addMovie(req, res, next) {
    var movie = req.body.movie.split(' ').join('+');
    var url = omdb + 'tomatoes=true&t=' + movie;
    Movie.find({ title: req.body.movie }).then(function (movies) {
      // add movie to db if the query returned empty
      if (!movies.length) {
        request(url, function (err, response, body) {
          if (err) {
            console.log('error from omdb request: ', err);
          } else {
            var data = JSON.parse(response.body);
            var info = {
              title: data.Title,
              year: data.Year,
              img: data.Poster,
              length: data.Runtime,
              plot: data.Plot,
              rating: data.tomatoUserRating
            };
            new Movie(info).save().then(function (movie) {
              console.log('saving movie to db');
              res.send(movie);
            });
          }
        });
      } else {
        res.send(movies[0]);
      }
    }).catch(function (err) {
      console.log('error in finding movies: ', err);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2ZXIvaGFuZGxlcnMuanMiXSwibmFtZXMiOlsiZGIiLCJyZXF1aXJlIiwicmVxdWVzdCIsIlVzZXIiLCJNb3ZpZSIsIm9tZGIiLCJtb2R1bGUiLCJleHBvcnRzIiwiYWRkTW92aWUiLCJyZXEiLCJyZXMiLCJuZXh0IiwibW92aWUiLCJib2R5Iiwic3BsaXQiLCJqb2luIiwidXJsIiwiZmluZCIsInRpdGxlIiwidGhlbiIsIm1vdmllcyIsImxlbmd0aCIsImVyciIsInJlc3BvbnNlIiwiY29uc29sZSIsImxvZyIsImRhdGEiLCJKU09OIiwicGFyc2UiLCJpbmZvIiwiVGl0bGUiLCJ5ZWFyIiwiWWVhciIsImltZyIsIlBvc3RlciIsIlJ1bnRpbWUiLCJwbG90IiwiUGxvdCIsInJhdGluZyIsInRvbWF0b1VzZXJSYXRpbmciLCJzYXZlIiwic2VuZCIsImNhdGNoIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLEtBQUtDLFFBQVEsaUJBQVIsQ0FBVDtBQUNBLElBQUlDLFVBQVVELFFBQVEsU0FBUixDQUFkOztBQUVBLElBQUlFLE9BQU9ILEdBQUdHLElBQWQ7QUFDQSxJQUFJQyxRQUFRSixHQUFHSSxLQUFmOztBQUVBLElBQUlDLE9BQU8sMEJBQVg7O0FBRUFDLE9BQU9DLE9BQVAsR0FBaUI7QUFDZkMsWUFBVSxrQkFBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQVdDLElBQVgsRUFBb0I7QUFDNUIsUUFBSUMsUUFBUUgsSUFBSUksSUFBSixDQUFTRCxLQUFULENBQWVFLEtBQWYsQ0FBcUIsR0FBckIsRUFBMEJDLElBQTFCLENBQStCLEdBQS9CLENBQVo7QUFDQSxRQUFJQyxNQUFNWCxPQUFPLGtCQUFQLEdBQTRCTyxLQUF0QztBQUNBUixVQUFNYSxJQUFOLENBQVcsRUFBQ0MsT0FBT1QsSUFBSUksSUFBSixDQUFTRCxLQUFqQixFQUFYLEVBQW9DTyxJQUFwQyxDQUF5QyxVQUFDQyxNQUFELEVBQVk7QUFDbkQ7QUFDQSxVQUFJLENBQUNBLE9BQU9DLE1BQVosRUFBb0I7QUFDbEJuQixnQkFBUWMsR0FBUixFQUFhLFVBQVNNLEdBQVQsRUFBY0MsUUFBZCxFQUF3QlYsSUFBeEIsRUFBOEI7QUFDekMsY0FBSVMsR0FBSixFQUFTO0FBQ1BFLG9CQUFRQyxHQUFSLENBQVksMkJBQVosRUFBeUNILEdBQXpDO0FBQ0QsV0FGRCxNQUVPO0FBQ0wsZ0JBQUlJLE9BQU9DLEtBQUtDLEtBQUwsQ0FBV0wsU0FBU1YsSUFBcEIsQ0FBWDtBQUNBLGdCQUFJZ0IsT0FBTztBQUNUWCxxQkFBT1EsS0FBS0ksS0FESDtBQUVUQyxvQkFBTUwsS0FBS00sSUFGRjtBQUdUQyxtQkFBS1AsS0FBS1EsTUFIRDtBQUlUYixzQkFBUUssS0FBS1MsT0FKSjtBQUtUQyxvQkFBTVYsS0FBS1csSUFMRjtBQU1UQyxzQkFBUVosS0FBS2E7QUFOSixhQUFYO0FBUUEsZ0JBQUluQyxLQUFKLENBQVV5QixJQUFWLEVBQWdCVyxJQUFoQixHQUF1QnJCLElBQXZCLENBQTRCLFVBQVNQLEtBQVQsRUFBZ0I7QUFDMUNZLHNCQUFRQyxHQUFSLENBQVksb0JBQVo7QUFDQWYsa0JBQUkrQixJQUFKLENBQVM3QixLQUFUO0FBQ0QsYUFIRDtBQUlEO0FBQ0YsU0FsQkQ7QUFtQkQsT0FwQkQsTUFvQk87QUFDTEYsWUFBSStCLElBQUosQ0FBU3JCLE9BQU8sQ0FBUCxDQUFUO0FBQ0Q7QUFDRixLQXpCRCxFQXlCR3NCLEtBekJILENBeUJTLFVBQUNwQixHQUFELEVBQVM7QUFDaEJFLGNBQVFDLEdBQVIsQ0FBWSwyQkFBWixFQUF5Q0gsR0FBekM7QUFDRCxLQTNCRDtBQTRCRDtBQWhDYyxDQUFqQiIsImZpbGUiOiJoYW5kbGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkYiA9IHJlcXVpcmUoJy4uL2RiL2NvbmZpZy5qcycpO1xudmFyIHJlcXVlc3QgPSByZXF1aXJlKCdyZXF1ZXN0Jyk7XG5cbnZhciBVc2VyID0gZGIuVXNlcjtcbnZhciBNb3ZpZSA9IGRiLk1vdmllO1xuXG52YXIgb21kYiA9ICdodHRwOi8vd3d3Lm9tZGJhcGkuY29tLz8nXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhZGRNb3ZpZTogKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgdmFyIG1vdmllID0gcmVxLmJvZHkubW92aWUuc3BsaXQoJyAnKS5qb2luKCcrJyk7XG4gICAgdmFyIHVybCA9IG9tZGIgKyAndG9tYXRvZXM9dHJ1ZSZ0PScgKyBtb3ZpZTtcbiAgICBNb3ZpZS5maW5kKHt0aXRsZTogcmVxLmJvZHkubW92aWV9KS50aGVuKChtb3ZpZXMpID0+IHtcbiAgICAgIC8vIGFkZCBtb3ZpZSB0byBkYiBpZiB0aGUgcXVlcnkgcmV0dXJuZWQgZW1wdHlcbiAgICAgIGlmICghbW92aWVzLmxlbmd0aCkge1xuICAgICAgICByZXF1ZXN0KHVybCwgZnVuY3Rpb24oZXJyLCByZXNwb25zZSwgYm9keSkge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvciBmcm9tIG9tZGIgcmVxdWVzdDogJywgZXJyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgdmFyIGluZm8gPSB7XG4gICAgICAgICAgICAgIHRpdGxlOiBkYXRhLlRpdGxlLFxuICAgICAgICAgICAgICB5ZWFyOiBkYXRhLlllYXIsXG4gICAgICAgICAgICAgIGltZzogZGF0YS5Qb3N0ZXIsXG4gICAgICAgICAgICAgIGxlbmd0aDogZGF0YS5SdW50aW1lLFxuICAgICAgICAgICAgICBwbG90OiBkYXRhLlBsb3QsXG4gICAgICAgICAgICAgIHJhdGluZzogZGF0YS50b21hdG9Vc2VyUmF0aW5nXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXcgTW92aWUoaW5mbykuc2F2ZSgpLnRoZW4oZnVuY3Rpb24obW92aWUpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3NhdmluZyBtb3ZpZSB0byBkYicpO1xuICAgICAgICAgICAgICByZXMuc2VuZChtb3ZpZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcy5zZW5kKG1vdmllc1swXSk7XG4gICAgICB9XG4gICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ2Vycm9yIGluIGZpbmRpbmcgbW92aWVzOiAnLCBlcnIpO1xuICAgIH0pXG4gIH1cbn0iXX0=